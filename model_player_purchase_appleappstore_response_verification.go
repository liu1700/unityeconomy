/*
Economy API

# Introduction   This document outlines the API specification for the Economy API.   The Economy service allows the game client to retrieve and modify a player's economy resources in the cloud. # Concepts   ## Resources   Economy currently allows interaction with the following types of resources:   - Currencies: A resource that, when defined, contains two parameters: Initial and Max. The Initial parameter determines how much of the currency a game assigns to a player upon first interacting with the Economy system. The Max parameter determines how much of the currency the player is allowed to have.   - Inventory Items: A resource that doesn't have any set parameters; its intended use is to indicate the ownership or acquisition of an item in-game, for example, Sword and Shield.     A game client can add, remove or update the associated data of an instance of a configured inventory item from the player's inventory.   - Virtual Purchases: A transactional resource to implement a shop or trade feature. Allows the player to buy items/currencies using the previously defined currencies or inventory items.     A game client can redeem a virtual purchase and the player's account updates with the rewards if the costs criteria are met.   - Real Money Purchases: A transactional resource with the intended use to facilitate a shop or trade feature. Allows the player to buy any amount of items/currencies through an in-app purchase. Only uses the previously defined currencies or inventory items.     A game client can redeem a real money purchase and the player's account updates with the rewards.    The above resources also have an optional Custom Data parameter that can be populated with JSON data from the dashboard to allow clients to read bespoke data.   ## Writelock   The WriteLock is an integer that is automatically incremented serverside whenever a request that changes the stored value of a player's account or inventory.   The purpose of the WriteLock is to help prevent requests from the same or other game clients happening out-of-sync.   This parameter is optional, but when supplied with a request, the service does a comparison with the stored WriteLock on the server, and returns an error on mismatch.   ## Rate Limits   The API has rate limiting in place. Requests are limited on a per-player basis up to 150 requests per minute.   The API responds with a `429` HTTP status code if the requests exceed the rate limit.   Responses with a `429` status code include a `Retry-After` header to be used in conjunction with a client's retry logic, the value is the number of seconds until a request for the given player is accepted. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityeconomy

import (
	"encoding/json"
)

// checks if the PlayerPurchaseAppleappstoreResponseVerification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerPurchaseAppleappstoreResponseVerification{}

// PlayerPurchaseAppleappstoreResponseVerification struct for PlayerPurchaseAppleappstoreResponseVerification
type PlayerPurchaseAppleappstoreResponseVerification struct {
	// Status of the receipt verification.  * `VALID`: The purchase was valid.  * `VALID_NOT_REDEEMED`: The purchase was valid but seen before, and had not yet been redeemed.  * `INVALID_ALREADY_REDEEMED`: The purchase has already been redeemed.  * `INVALID_VERIFICATION_FAILED`: The receipt verification Service returned that the receipt data was not valid.  * `INVALID_ANOTHER_PLAYER`: The receipt has previously been used by a different player and validated.  * `INVALID_CONFIGURATION`: The service configuration is invalid, further information in the details section of the response.  * `INVALID_PRODUCT_ID_MISMATCH`: The purchase configuration store product identifier does not match the one in the receipt. * `CURRENCY_MAX_EXCEEDED`: Could not add the rewards because one or more currencies would be taken over the specified maximum balance.
	Status string `json:"status"`
	Store PlayerPurchaseAppleappstoreResponseVerificationStore `json:"store"`
}

// NewPlayerPurchaseAppleappstoreResponseVerification instantiates a new PlayerPurchaseAppleappstoreResponseVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerPurchaseAppleappstoreResponseVerification(status string, store PlayerPurchaseAppleappstoreResponseVerificationStore) *PlayerPurchaseAppleappstoreResponseVerification {
	this := PlayerPurchaseAppleappstoreResponseVerification{}
	this.Status = status
	this.Store = store
	return &this
}

// NewPlayerPurchaseAppleappstoreResponseVerificationWithDefaults instantiates a new PlayerPurchaseAppleappstoreResponseVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerPurchaseAppleappstoreResponseVerificationWithDefaults() *PlayerPurchaseAppleappstoreResponseVerification {
	this := PlayerPurchaseAppleappstoreResponseVerification{}
	return &this
}

// GetStatus returns the Status field value
func (o *PlayerPurchaseAppleappstoreResponseVerification) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PlayerPurchaseAppleappstoreResponseVerification) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PlayerPurchaseAppleappstoreResponseVerification) SetStatus(v string) {
	o.Status = v
}

// GetStore returns the Store field value
func (o *PlayerPurchaseAppleappstoreResponseVerification) GetStore() PlayerPurchaseAppleappstoreResponseVerificationStore {
	if o == nil {
		var ret PlayerPurchaseAppleappstoreResponseVerificationStore
		return ret
	}

	return o.Store
}

// GetStoreOk returns a tuple with the Store field value
// and a boolean to check if the value has been set.
func (o *PlayerPurchaseAppleappstoreResponseVerification) GetStoreOk() (*PlayerPurchaseAppleappstoreResponseVerificationStore, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Store, true
}

// SetStore sets field value
func (o *PlayerPurchaseAppleappstoreResponseVerification) SetStore(v PlayerPurchaseAppleappstoreResponseVerificationStore) {
	o.Store = v
}

func (o PlayerPurchaseAppleappstoreResponseVerification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerPurchaseAppleappstoreResponseVerification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["store"] = o.Store
	return toSerialize, nil
}

type NullablePlayerPurchaseAppleappstoreResponseVerification struct {
	value *PlayerPurchaseAppleappstoreResponseVerification
	isSet bool
}

func (v NullablePlayerPurchaseAppleappstoreResponseVerification) Get() *PlayerPurchaseAppleappstoreResponseVerification {
	return v.value
}

func (v *NullablePlayerPurchaseAppleappstoreResponseVerification) Set(val *PlayerPurchaseAppleappstoreResponseVerification) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerPurchaseAppleappstoreResponseVerification) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerPurchaseAppleappstoreResponseVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerPurchaseAppleappstoreResponseVerification(val *PlayerPurchaseAppleappstoreResponseVerification) *NullablePlayerPurchaseAppleappstoreResponseVerification {
	return &NullablePlayerPurchaseAppleappstoreResponseVerification{value: val, isSet: true}
}

func (v NullablePlayerPurchaseAppleappstoreResponseVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerPurchaseAppleappstoreResponseVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


