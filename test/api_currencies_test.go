/*
Economy API

Testing CurrenciesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package unityeconomy

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/liu1700/unityeconomy"
)

func Test_unityeconomy_CurrenciesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CurrenciesAPIService DecrementPlayerCurrencyBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var playerId string
		var currencyId string

		resp, httpRes, err := apiClient.CurrenciesAPI.DecrementPlayerCurrencyBalance(context.Background(), projectId, playerId, currencyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesAPIService GetPlayerCurrencies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var playerId string

		resp, httpRes, err := apiClient.CurrenciesAPI.GetPlayerCurrencies(context.Background(), projectId, playerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesAPIService IncrementPlayerCurrencyBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var playerId string
		var currencyId string

		resp, httpRes, err := apiClient.CurrenciesAPI.IncrementPlayerCurrencyBalance(context.Background(), projectId, playerId, currencyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesAPIService SetPlayerCurrencyBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var playerId string
		var currencyId string

		resp, httpRes, err := apiClient.CurrenciesAPI.SetPlayerCurrencyBalance(context.Background(), projectId, playerId, currencyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
